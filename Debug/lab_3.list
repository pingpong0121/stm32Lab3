
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e2c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001f38  08001f38  00002f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f68  08001f68  00003018  2**0
                  CONTENTS
  4 .ARM          00000000  08001f68  08001f68  00003018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f68  08001f68  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f68  08001f68  00002f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f6c  08001f6c  00002f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08001f70  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000018  08001f88  00003018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08001f88  000030f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008059  00000000  00000000  00003041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3f  00000000  00000000  0000b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0000cae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007da  00000000  00000000  0000d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b33  00000000  00000000  0000dd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9d1  00000000  00000000  0002483d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082661  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b286f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ec  00000000  00000000  000b28b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000b51a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f20 	.word	0x08001f20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001f20 	.word	0x08001f20

0800014c <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[BUTTONS_NUMBER] = {0,0,0};


int isButtonPressed(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[i] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0

}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000034 	.word	0x20000034

08000180 <auto_run>:
 *
 *  Created on: Oct 31, 2024
 *      Author: ASUS
 */
#include "fsm_auto.h"
void auto_run(){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1 ){
 8000184:	2000      	movs	r0, #0
 8000186:	f7ff ffe1 	bl	800014c <isButtonPressed>
 800018a:	4603      	mov	r3, r0
 800018c:	2b01      	cmp	r3, #1
 800018e:	d108      	bne.n	80001a2 <auto_run+0x22>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 51fc 	mov.w	r1, #8064	@ 0x1f80
 8000196:	4899      	ldr	r0, [pc, #612]	@ (80003fc <auto_run+0x27c>)
 8000198:	f000 ffea 	bl	8001170 <HAL_GPIO_WritePin>
		                          |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
		MODE = MODE2;
 800019c:	4b98      	ldr	r3, [pc, #608]	@ (8000400 <auto_run+0x280>)
 800019e:	2202      	movs	r2, #2
 80001a0:	701a      	strb	r2, [r3, #0]
	}
	if(MODE == MODE1){
 80001a2:	4b97      	ldr	r3, [pc, #604]	@ (8000400 <auto_run+0x280>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	f040 8125 	bne.w	80003f6 <auto_run+0x276>
		switch(firstCoupleLedAutoState){
 80001ac:	4b95      	ldr	r3, [pc, #596]	@ (8000404 <auto_run+0x284>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b03      	cmp	r3, #3
 80001b2:	d867      	bhi.n	8000284 <auto_run+0x104>
 80001b4:	a201      	add	r2, pc, #4	@ (adr r2, 80001bc <auto_run+0x3c>)
 80001b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ba:	bf00      	nop
 80001bc:	080001cd 	.word	0x080001cd
 80001c0:	080001dd 	.word	0x080001dd
 80001c4:	08000215 	.word	0x08000215
 80001c8:	0800024d 	.word	0x0800024d
			case LED_INIT:
				firstCoupleLedAutoState = RED;
 80001cc:	4b8d      	ldr	r3, [pc, #564]	@ (8000404 <auto_run+0x284>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
				setTimer(0, 100);
 80001d2:	2164      	movs	r1, #100	@ 0x64
 80001d4:	2000      	movs	r0, #0
 80001d6:	f000 fc4b 	bl	8000a70 <setTimer>
				break;
 80001da:	e05a      	b.n	8000292 <auto_run+0x112>
			case RED:
				displayFirstLedCouple(RED);
 80001dc:	2001      	movs	r0, #1
 80001de:	f000 f97b 	bl	80004d8 <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 80001e2:	4b89      	ldr	r3, [pc, #548]	@ (8000408 <auto_run+0x288>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d14e      	bne.n	8000288 <auto_run+0x108>
					countdownFirstCoupleLed--;
 80001ea:	4b88      	ldr	r3, [pc, #544]	@ (800040c <auto_run+0x28c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	3b01      	subs	r3, #1
 80001f0:	4a86      	ldr	r2, [pc, #536]	@ (800040c <auto_run+0x28c>)
 80001f2:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 80001f4:	4b85      	ldr	r3, [pc, #532]	@ (800040c <auto_run+0x28c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d106      	bne.n	800020a <auto_run+0x8a>
						countdownFirstCoupleLed = greenDelay;
 80001fc:	4b84      	ldr	r3, [pc, #528]	@ (8000410 <auto_run+0x290>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a82      	ldr	r2, [pc, #520]	@ (800040c <auto_run+0x28c>)
 8000202:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = GREEN;
 8000204:	4b7f      	ldr	r3, [pc, #508]	@ (8000404 <auto_run+0x284>)
 8000206:	2202      	movs	r2, #2
 8000208:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 800020a:	2164      	movs	r1, #100	@ 0x64
 800020c:	2000      	movs	r0, #0
 800020e:	f000 fc2f 	bl	8000a70 <setTimer>
				}
				break;
 8000212:	e039      	b.n	8000288 <auto_run+0x108>
			case GREEN:
				displayFirstLedCouple(GREEN);
 8000214:	2002      	movs	r0, #2
 8000216:	f000 f95f 	bl	80004d8 <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 800021a:	4b7b      	ldr	r3, [pc, #492]	@ (8000408 <auto_run+0x288>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d134      	bne.n	800028c <auto_run+0x10c>
					countdownFirstCoupleLed--;
 8000222:	4b7a      	ldr	r3, [pc, #488]	@ (800040c <auto_run+0x28c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	3b01      	subs	r3, #1
 8000228:	4a78      	ldr	r2, [pc, #480]	@ (800040c <auto_run+0x28c>)
 800022a:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 800022c:	4b77      	ldr	r3, [pc, #476]	@ (800040c <auto_run+0x28c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d106      	bne.n	8000242 <auto_run+0xc2>
						countdownFirstCoupleLed = yellowDelay;
 8000234:	4b77      	ldr	r3, [pc, #476]	@ (8000414 <auto_run+0x294>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a74      	ldr	r2, [pc, #464]	@ (800040c <auto_run+0x28c>)
 800023a:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = YELLOW;
 800023c:	4b71      	ldr	r3, [pc, #452]	@ (8000404 <auto_run+0x284>)
 800023e:	2203      	movs	r2, #3
 8000240:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 8000242:	2164      	movs	r1, #100	@ 0x64
 8000244:	2000      	movs	r0, #0
 8000246:	f000 fc13 	bl	8000a70 <setTimer>
				}
				break;
 800024a:	e01f      	b.n	800028c <auto_run+0x10c>
			case YELLOW:
				displayFirstLedCouple(YELLOW);
 800024c:	2003      	movs	r0, #3
 800024e:	f000 f943 	bl	80004d8 <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 8000252:	4b6d      	ldr	r3, [pc, #436]	@ (8000408 <auto_run+0x288>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d11a      	bne.n	8000290 <auto_run+0x110>
					countdownFirstCoupleLed--;
 800025a:	4b6c      	ldr	r3, [pc, #432]	@ (800040c <auto_run+0x28c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	3b01      	subs	r3, #1
 8000260:	4a6a      	ldr	r2, [pc, #424]	@ (800040c <auto_run+0x28c>)
 8000262:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 8000264:	4b69      	ldr	r3, [pc, #420]	@ (800040c <auto_run+0x28c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d106      	bne.n	800027a <auto_run+0xfa>
						countdownFirstCoupleLed = redDelay;
 800026c:	4b6a      	ldr	r3, [pc, #424]	@ (8000418 <auto_run+0x298>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a66      	ldr	r2, [pc, #408]	@ (800040c <auto_run+0x28c>)
 8000272:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = RED;
 8000274:	4b63      	ldr	r3, [pc, #396]	@ (8000404 <auto_run+0x284>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 800027a:	2164      	movs	r1, #100	@ 0x64
 800027c:	2000      	movs	r0, #0
 800027e:	f000 fbf7 	bl	8000a70 <setTimer>
				}
				break;
 8000282:	e005      	b.n	8000290 <auto_run+0x110>
			default:
				break;
 8000284:	bf00      	nop
 8000286:	e004      	b.n	8000292 <auto_run+0x112>
				break;
 8000288:	bf00      	nop
 800028a:	e002      	b.n	8000292 <auto_run+0x112>
				break;
 800028c:	bf00      	nop
 800028e:	e000      	b.n	8000292 <auto_run+0x112>
				break;
 8000290:	bf00      	nop
		}
		switch(secondCoupleLedAutoState){
 8000292:	4b62      	ldr	r3, [pc, #392]	@ (800041c <auto_run+0x29c>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b03      	cmp	r3, #3
 8000298:	d866      	bhi.n	8000368 <auto_run+0x1e8>
 800029a:	a201      	add	r2, pc, #4	@ (adr r2, 80002a0 <auto_run+0x120>)
 800029c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a0:	080002b1 	.word	0x080002b1
 80002a4:	080002c1 	.word	0x080002c1
 80002a8:	080002f9 	.word	0x080002f9
 80002ac:	08000331 	.word	0x08000331
			case LED_INIT:
				secondCoupleLedAutoState = GREEN;
 80002b0:	4b5a      	ldr	r3, [pc, #360]	@ (800041c <auto_run+0x29c>)
 80002b2:	2202      	movs	r2, #2
 80002b4:	701a      	strb	r2, [r3, #0]
				setTimer(1, 100);
 80002b6:	2164      	movs	r1, #100	@ 0x64
 80002b8:	2001      	movs	r0, #1
 80002ba:	f000 fbd9 	bl	8000a70 <setTimer>
				break;
 80002be:	e05a      	b.n	8000376 <auto_run+0x1f6>
			case RED:
				displaySecondLedCouple(RED);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 f965 	bl	8000590 <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 80002c6:	4b50      	ldr	r3, [pc, #320]	@ (8000408 <auto_run+0x288>)
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d14e      	bne.n	800036c <auto_run+0x1ec>
					countdownSecondCoupleLed--;
 80002ce:	4b54      	ldr	r3, [pc, #336]	@ (8000420 <auto_run+0x2a0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	4a52      	ldr	r2, [pc, #328]	@ (8000420 <auto_run+0x2a0>)
 80002d6:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 80002d8:	4b51      	ldr	r3, [pc, #324]	@ (8000420 <auto_run+0x2a0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d106      	bne.n	80002ee <auto_run+0x16e>
						countdownSecondCoupleLed = greenDelay;
 80002e0:	4b4b      	ldr	r3, [pc, #300]	@ (8000410 <auto_run+0x290>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a4e      	ldr	r2, [pc, #312]	@ (8000420 <auto_run+0x2a0>)
 80002e6:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = GREEN;
 80002e8:	4b4c      	ldr	r3, [pc, #304]	@ (800041c <auto_run+0x29c>)
 80002ea:	2202      	movs	r2, #2
 80002ec:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 80002ee:	2164      	movs	r1, #100	@ 0x64
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 fbbd 	bl	8000a70 <setTimer>
				}
				break;
 80002f6:	e039      	b.n	800036c <auto_run+0x1ec>
			case GREEN:
				displaySecondLedCouple(GREEN);
 80002f8:	2002      	movs	r0, #2
 80002fa:	f000 f949 	bl	8000590 <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 80002fe:	4b42      	ldr	r3, [pc, #264]	@ (8000408 <auto_run+0x288>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d134      	bne.n	8000370 <auto_run+0x1f0>
					countdownSecondCoupleLed--;
 8000306:	4b46      	ldr	r3, [pc, #280]	@ (8000420 <auto_run+0x2a0>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	3b01      	subs	r3, #1
 800030c:	4a44      	ldr	r2, [pc, #272]	@ (8000420 <auto_run+0x2a0>)
 800030e:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 8000310:	4b43      	ldr	r3, [pc, #268]	@ (8000420 <auto_run+0x2a0>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d106      	bne.n	8000326 <auto_run+0x1a6>
						countdownSecondCoupleLed = yellowDelay;
 8000318:	4b3e      	ldr	r3, [pc, #248]	@ (8000414 <auto_run+0x294>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a40      	ldr	r2, [pc, #256]	@ (8000420 <auto_run+0x2a0>)
 800031e:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = YELLOW;
 8000320:	4b3e      	ldr	r3, [pc, #248]	@ (800041c <auto_run+0x29c>)
 8000322:	2203      	movs	r2, #3
 8000324:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 8000326:	2164      	movs	r1, #100	@ 0x64
 8000328:	2001      	movs	r0, #1
 800032a:	f000 fba1 	bl	8000a70 <setTimer>
				}
				break;
 800032e:	e01f      	b.n	8000370 <auto_run+0x1f0>
			case YELLOW:
				displaySecondLedCouple(YELLOW);
 8000330:	2003      	movs	r0, #3
 8000332:	f000 f92d 	bl	8000590 <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 8000336:	4b34      	ldr	r3, [pc, #208]	@ (8000408 <auto_run+0x288>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d11a      	bne.n	8000374 <auto_run+0x1f4>
					countdownSecondCoupleLed--;
 800033e:	4b38      	ldr	r3, [pc, #224]	@ (8000420 <auto_run+0x2a0>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	3b01      	subs	r3, #1
 8000344:	4a36      	ldr	r2, [pc, #216]	@ (8000420 <auto_run+0x2a0>)
 8000346:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 8000348:	4b35      	ldr	r3, [pc, #212]	@ (8000420 <auto_run+0x2a0>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d106      	bne.n	800035e <auto_run+0x1de>
						countdownSecondCoupleLed = redDelay;
 8000350:	4b31      	ldr	r3, [pc, #196]	@ (8000418 <auto_run+0x298>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a32      	ldr	r2, [pc, #200]	@ (8000420 <auto_run+0x2a0>)
 8000356:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = RED;
 8000358:	4b30      	ldr	r3, [pc, #192]	@ (800041c <auto_run+0x29c>)
 800035a:	2201      	movs	r2, #1
 800035c:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 800035e:	2164      	movs	r1, #100	@ 0x64
 8000360:	2001      	movs	r0, #1
 8000362:	f000 fb85 	bl	8000a70 <setTimer>
				}
				break;
 8000366:	e005      	b.n	8000374 <auto_run+0x1f4>
			default:
				break;
 8000368:	bf00      	nop
 800036a:	e004      	b.n	8000376 <auto_run+0x1f6>
				break;
 800036c:	bf00      	nop
 800036e:	e002      	b.n	8000376 <auto_run+0x1f6>
				break;
 8000370:	bf00      	nop
 8000372:	e000      	b.n	8000376 <auto_run+0x1f6>
				break;
 8000374:	bf00      	nop
		}

		switch(seg7AutoState){
 8000376:	4b2b      	ldr	r3, [pc, #172]	@ (8000424 <auto_run+0x2a4>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b02      	cmp	r3, #2
 800037c:	d022      	beq.n	80003c4 <auto_run+0x244>
 800037e:	2b02      	cmp	r3, #2
 8000380:	dc34      	bgt.n	80003ec <auto_run+0x26c>
 8000382:	2b00      	cmp	r3, #0
 8000384:	d002      	beq.n	800038c <auto_run+0x20c>
 8000386:	2b01      	cmp	r3, #1
 8000388:	d008      	beq.n	800039c <auto_run+0x21c>
					seg7AutoState = FIRST;
					setTimer(2, 50);
				}
				break;
			default:
				break;
 800038a:	e02f      	b.n	80003ec <auto_run+0x26c>
				seg7AutoState = FIRST;
 800038c:	4b25      	ldr	r3, [pc, #148]	@ (8000424 <auto_run+0x2a4>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
				setTimer(2, 1);
 8000392:	2101      	movs	r1, #1
 8000394:	2002      	movs	r0, #2
 8000396:	f000 fb6b 	bl	8000a70 <setTimer>
				break;
 800039a:	e02c      	b.n	80003f6 <auto_run+0x276>
				if(timer_flag[2] == 1){
 800039c:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <auto_run+0x288>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d125      	bne.n	80003f0 <auto_run+0x270>
					showTimeDelay_First(countdownFirstCoupleLed, countdownSecondCoupleLed);
 80003a4:	4b19      	ldr	r3, [pc, #100]	@ (800040c <auto_run+0x28c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000420 <auto_run+0x2a0>)
 80003aa:	6812      	ldr	r2, [r2, #0]
 80003ac:	4611      	mov	r1, r2
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f9f6 	bl	80007a0 <showTimeDelay_First>
					seg7AutoState = SECOND;
 80003b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000424 <auto_run+0x2a4>)
 80003b6:	2202      	movs	r2, #2
 80003b8:	701a      	strb	r2, [r3, #0]
					setTimer(2, 50);
 80003ba:	2132      	movs	r1, #50	@ 0x32
 80003bc:	2002      	movs	r0, #2
 80003be:	f000 fb57 	bl	8000a70 <setTimer>
				break;
 80003c2:	e015      	b.n	80003f0 <auto_run+0x270>
				if(timer_flag[2] == 1){
 80003c4:	4b10      	ldr	r3, [pc, #64]	@ (8000408 <auto_run+0x288>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d113      	bne.n	80003f4 <auto_run+0x274>
					showTimeDelay_Second(countdownFirstCoupleLed, countdownSecondCoupleLed);
 80003cc:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <auto_run+0x28c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a13      	ldr	r2, [pc, #76]	@ (8000420 <auto_run+0x2a0>)
 80003d2:	6812      	ldr	r2, [r2, #0]
 80003d4:	4611      	mov	r1, r2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fa0c 	bl	80007f4 <showTimeDelay_Second>
					seg7AutoState = FIRST;
 80003dc:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <auto_run+0x2a4>)
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
					setTimer(2, 50);
 80003e2:	2132      	movs	r1, #50	@ 0x32
 80003e4:	2002      	movs	r0, #2
 80003e6:	f000 fb43 	bl	8000a70 <setTimer>
				break;
 80003ea:	e003      	b.n	80003f4 <auto_run+0x274>
				break;
 80003ec:	bf00      	nop
 80003ee:	e002      	b.n	80003f6 <auto_run+0x276>
				break;
 80003f0:	bf00      	nop
 80003f2:	e000      	b.n	80003f6 <auto_run+0x276>
				break;
 80003f4:	bf00      	nop
		}
	}
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40010800 	.word	0x40010800
 8000400:	20000040 	.word	0x20000040
 8000404:	2000004a 	.word	0x2000004a
 8000408:	200000c8 	.word	0x200000c8
 800040c:	20000050 	.word	0x20000050
 8000410:	20000004 	.word	0x20000004
 8000414:	20000008 	.word	0x20000008
 8000418:	20000000 	.word	0x20000000
 800041c:	2000004b 	.word	0x2000004b
 8000420:	20000054 	.word	0x20000054
 8000424:	2000004c 	.word	0x2000004c

08000428 <setValues>:


int countdownFirstCoupleLed;
int countdownSecondCoupleLed;

void setValues(void){
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	MODE = MODE1;
 800042c:	4b19      	ldr	r3, [pc, #100]	@ (8000494 <setValues+0x6c>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]

	mode2Toggle = TOGGLE_INIT;
 8000432:	4b19      	ldr	r3, [pc, #100]	@ (8000498 <setValues+0x70>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
	mode2Seg = SEG_INIT;
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <setValues+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	mode2Increase = INCREASE_INIT;
 800043e:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <setValues+0x78>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	mode3Toggle = TOGGLE_INIT;
 8000444:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <setValues+0x7c>)
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
	mode3Seg = SEG_INIT;
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <setValues+0x80>)
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
	mode3Increase = INCREASE_INIT;
 8000450:	4b16      	ldr	r3, [pc, #88]	@ (80004ac <setValues+0x84>)
 8000452:	2200      	movs	r2, #0
 8000454:	701a      	strb	r2, [r3, #0]

	mode4Toggle = TOGGLE_INIT;
 8000456:	4b16      	ldr	r3, [pc, #88]	@ (80004b0 <setValues+0x88>)
 8000458:	2200      	movs	r2, #0
 800045a:	701a      	strb	r2, [r3, #0]
	mode4Seg = SEG_INIT;
 800045c:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <setValues+0x8c>)
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]
	mode4Increase = INCREASE_INIT;
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <setValues+0x90>)
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]

	firstCoupleLedAutoState = LED_INIT;
 8000468:	4b14      	ldr	r3, [pc, #80]	@ (80004bc <setValues+0x94>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	secondCoupleLedAutoState = LED_INIT;
 800046e:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <setValues+0x98>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
	seg7AutoState = SEG_INIT;
 8000474:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <setValues+0x9c>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]

	countdownFirstCoupleLed = redDelay;
 800047a:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <setValues+0xa0>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a13      	ldr	r2, [pc, #76]	@ (80004cc <setValues+0xa4>)
 8000480:	6013      	str	r3, [r2, #0]
	countdownSecondCoupleLed = greenDelay;
 8000482:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <setValues+0xa8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a13      	ldr	r2, [pc, #76]	@ (80004d4 <setValues+0xac>)
 8000488:	6013      	str	r3, [r2, #0]
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	20000040 	.word	0x20000040
 8000498:	20000041 	.word	0x20000041
 800049c:	20000042 	.word	0x20000042
 80004a0:	20000043 	.word	0x20000043
 80004a4:	20000044 	.word	0x20000044
 80004a8:	20000045 	.word	0x20000045
 80004ac:	20000046 	.word	0x20000046
 80004b0:	20000047 	.word	0x20000047
 80004b4:	20000048 	.word	0x20000048
 80004b8:	20000049 	.word	0x20000049
 80004bc:	2000004a 	.word	0x2000004a
 80004c0:	2000004b 	.word	0x2000004b
 80004c4:	2000004c 	.word	0x2000004c
 80004c8:	20000000 	.word	0x20000000
 80004cc:	20000050 	.word	0x20000050
 80004d0:	20000004 	.word	0x20000004
 80004d4:	20000054 	.word	0x20000054

080004d8 <displayFirstLedCouple>:
 */


#include "led_display.h"

	void displayFirstLedCouple(enum LedState state_1){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
		switch(state_1){
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2b03      	cmp	r3, #3
 80004e6:	d84b      	bhi.n	8000580 <displayFirstLedCouple+0xa8>
 80004e8:	a201      	add	r2, pc, #4	@ (adr r2, 80004f0 <displayFirstLedCouple+0x18>)
 80004ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ee:	bf00      	nop
 80004f0:	08000501 	.word	0x08000501
 80004f4:	08000521 	.word	0x08000521
 80004f8:	08000561 	.word	0x08000561
 80004fc:	08000541 	.word	0x08000541
		 case LED_INIT:
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2108      	movs	r1, #8
 8000504:	4821      	ldr	r0, [pc, #132]	@ (800058c <displayFirstLedCouple+0xb4>)
 8000506:	f000 fe33 	bl	8001170 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2104      	movs	r1, #4
 800050e:	481f      	ldr	r0, [pc, #124]	@ (800058c <displayFirstLedCouple+0xb4>)
 8000510:	f000 fe2e 	bl	8001170 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2102      	movs	r1, #2
 8000518:	481c      	ldr	r0, [pc, #112]	@ (800058c <displayFirstLedCouple+0xb4>)
 800051a:	f000 fe29 	bl	8001170 <HAL_GPIO_WritePin>
				 break;
 800051e:	e030      	b.n	8000582 <displayFirstLedCouple+0xaa>
		 case RED:
			 HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2108      	movs	r1, #8
 8000524:	4819      	ldr	r0, [pc, #100]	@ (800058c <displayFirstLedCouple+0xb4>)
 8000526:	f000 fe23 	bl	8001170 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2104      	movs	r1, #4
 800052e:	4817      	ldr	r0, [pc, #92]	@ (800058c <displayFirstLedCouple+0xb4>)
 8000530:	f000 fe1e 	bl	8001170 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2102      	movs	r1, #2
 8000538:	4814      	ldr	r0, [pc, #80]	@ (800058c <displayFirstLedCouple+0xb4>)
 800053a:	f000 fe19 	bl	8001170 <HAL_GPIO_WritePin>
				 break;
 800053e:	e020      	b.n	8000582 <displayFirstLedCouple+0xaa>
		 case YELLOW:
			 HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2108      	movs	r1, #8
 8000544:	4811      	ldr	r0, [pc, #68]	@ (800058c <displayFirstLedCouple+0xb4>)
 8000546:	f000 fe13 	bl	8001170 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2104      	movs	r1, #4
 800054e:	480f      	ldr	r0, [pc, #60]	@ (800058c <displayFirstLedCouple+0xb4>)
 8000550:	f000 fe0e 	bl	8001170 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2102      	movs	r1, #2
 8000558:	480c      	ldr	r0, [pc, #48]	@ (800058c <displayFirstLedCouple+0xb4>)
 800055a:	f000 fe09 	bl	8001170 <HAL_GPIO_WritePin>
				 break;
 800055e:	e010      	b.n	8000582 <displayFirstLedCouple+0xaa>
		 case GREEN:
			 HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2108      	movs	r1, #8
 8000564:	4809      	ldr	r0, [pc, #36]	@ (800058c <displayFirstLedCouple+0xb4>)
 8000566:	f000 fe03 	bl	8001170 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2104      	movs	r1, #4
 800056e:	4807      	ldr	r0, [pc, #28]	@ (800058c <displayFirstLedCouple+0xb4>)
 8000570:	f000 fdfe 	bl	8001170 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	4804      	ldr	r0, [pc, #16]	@ (800058c <displayFirstLedCouple+0xb4>)
 800057a:	f000 fdf9 	bl	8001170 <HAL_GPIO_WritePin>
				 break;
 800057e:	e000      	b.n	8000582 <displayFirstLedCouple+0xaa>
		 default:
			 break;
 8000580:	bf00      	nop
		}
	}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40010800 	.word	0x40010800

08000590 <displaySecondLedCouple>:



	void displaySecondLedCouple(enum LedState state_2){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
		switch(state_2){
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d84b      	bhi.n	8000638 <displaySecondLedCouple+0xa8>
 80005a0:	a201      	add	r2, pc, #4	@ (adr r2, 80005a8 <displaySecondLedCouple+0x18>)
 80005a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a6:	bf00      	nop
 80005a8:	080005b9 	.word	0x080005b9
 80005ac:	080005d9 	.word	0x080005d9
 80005b0:	08000619 	.word	0x08000619
 80005b4:	080005f9 	.word	0x080005f9
			 case LED_INIT:
				 HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , SET) ;
 80005b8:	2201      	movs	r2, #1
 80005ba:	2140      	movs	r1, #64	@ 0x40
 80005bc:	4821      	ldr	r0, [pc, #132]	@ (8000644 <displaySecondLedCouple+0xb4>)
 80005be:	f000 fdd7 	bl	8001170 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , SET ) ;
 80005c2:	2201      	movs	r2, #1
 80005c4:	2120      	movs	r1, #32
 80005c6:	481f      	ldr	r0, [pc, #124]	@ (8000644 <displaySecondLedCouple+0xb4>)
 80005c8:	f000 fdd2 	bl	8001170 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , SET ) ;
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	481c      	ldr	r0, [pc, #112]	@ (8000644 <displaySecondLedCouple+0xb4>)
 80005d2:	f000 fdcd 	bl	8001170 <HAL_GPIO_WritePin>
				 break;
 80005d6:	e030      	b.n	800063a <displaySecondLedCouple+0xaa>
			case RED:
				HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , SET) ;
 80005d8:	2201      	movs	r2, #1
 80005da:	2140      	movs	r1, #64	@ 0x40
 80005dc:	4819      	ldr	r0, [pc, #100]	@ (8000644 <displaySecondLedCouple+0xb4>)
 80005de:	f000 fdc7 	bl	8001170 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , SET ) ;
 80005e2:	2201      	movs	r2, #1
 80005e4:	2120      	movs	r1, #32
 80005e6:	4817      	ldr	r0, [pc, #92]	@ (8000644 <displaySecondLedCouple+0xb4>)
 80005e8:	f000 fdc2 	bl	8001170 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , RESET ) ;
 80005ec:	2200      	movs	r2, #0
 80005ee:	2110      	movs	r1, #16
 80005f0:	4814      	ldr	r0, [pc, #80]	@ (8000644 <displaySecondLedCouple+0xb4>)
 80005f2:	f000 fdbd 	bl	8001170 <HAL_GPIO_WritePin>
				break;
 80005f6:	e020      	b.n	800063a <displaySecondLedCouple+0xaa>
			case YELLOW:
				HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , SET) ;
 80005f8:	2201      	movs	r2, #1
 80005fa:	2140      	movs	r1, #64	@ 0x40
 80005fc:	4811      	ldr	r0, [pc, #68]	@ (8000644 <displaySecondLedCouple+0xb4>)
 80005fe:	f000 fdb7 	bl	8001170 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , RESET ) ;
 8000602:	2200      	movs	r2, #0
 8000604:	2120      	movs	r1, #32
 8000606:	480f      	ldr	r0, [pc, #60]	@ (8000644 <displaySecondLedCouple+0xb4>)
 8000608:	f000 fdb2 	bl	8001170 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , SET ) ;
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	480c      	ldr	r0, [pc, #48]	@ (8000644 <displaySecondLedCouple+0xb4>)
 8000612:	f000 fdad 	bl	8001170 <HAL_GPIO_WritePin>
				break;
 8000616:	e010      	b.n	800063a <displaySecondLedCouple+0xaa>
			case GREEN:
				HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , RESET) ;
 8000618:	2200      	movs	r2, #0
 800061a:	2140      	movs	r1, #64	@ 0x40
 800061c:	4809      	ldr	r0, [pc, #36]	@ (8000644 <displaySecondLedCouple+0xb4>)
 800061e:	f000 fda7 	bl	8001170 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , SET ) ;
 8000622:	2201      	movs	r2, #1
 8000624:	2120      	movs	r1, #32
 8000626:	4807      	ldr	r0, [pc, #28]	@ (8000644 <displaySecondLedCouple+0xb4>)
 8000628:	f000 fda2 	bl	8001170 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , SET ) ;
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4804      	ldr	r0, [pc, #16]	@ (8000644 <displaySecondLedCouple+0xb4>)
 8000632:	f000 fd9d 	bl	8001170 <HAL_GPIO_WritePin>
				break;
 8000636:	e000      	b.n	800063a <displaySecondLedCouple+0xaa>
			default:
			  break;
 8000638:	bf00      	nop
	   }
	}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40010800 	.word	0x40010800

08000648 <displaySEG7_1>:
	 default:
		 break;
	}
}

void displaySEG7_1(int num) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    char led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 8000650:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <displaySEG7_1+0x5c>)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	ca07      	ldmia	r2, {r0, r1, r2}
 8000658:	c303      	stmia	r3!, {r0, r1}
 800065a:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 7; i++) {
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e018      	b.n	8000694 <displaySEG7_1+0x4c>
        HAL_GPIO_WritePin(GPIOB, A1_Pin << i, (led7seg[num] >> i) & 1);
 8000662:	2201      	movs	r2, #1
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	b299      	uxth	r1, r3
 800066c:	f107 0208 	add.w	r2, r7, #8
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	fa42 f303 	asr.w	r3, r2, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <displaySEG7_1+0x60>)
 800068a:	f000 fd71 	bl	8001170 <HAL_GPIO_WritePin>
    for (int i = 0; i < 7; i++) {
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2b06      	cmp	r3, #6
 8000698:	dde3      	ble.n	8000662 <displaySEG7_1+0x1a>
    }
}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	08001f38 	.word	0x08001f38
 80006a8:	40010c00 	.word	0x40010c00

080006ac <displaySEG7_2>:
void displaySEG7_2(int num) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    char led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 80006b4:	4a14      	ldr	r2, [pc, #80]	@ (8000708 <displaySEG7_2+0x5c>)
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80006bc:	c303      	stmia	r3!, {r0, r1}
 80006be:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 7; i++) {
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	e018      	b.n	80006f8 <displaySEG7_2+0x4c>
        HAL_GPIO_WritePin(GPIOB, A2_Pin << i, (led7seg[num] >> i) & 1);
 80006c6:	2280      	movs	r2, #128	@ 0x80
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	b299      	uxth	r1, r3
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	fa42 f303 	asr.w	r3, r2, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	4807      	ldr	r0, [pc, #28]	@ (800070c <displaySEG7_2+0x60>)
 80006ee:	f000 fd3f 	bl	8001170 <HAL_GPIO_WritePin>
    for (int i = 0; i < 7; i++) {
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	dde3      	ble.n	80006c6 <displaySEG7_2+0x1a>
    }
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	08001f38 	.word	0x08001f38
 800070c:	40010c00 	.word	0x40010c00

08000710 <enable0>:

void enable0(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2180      	movs	r1, #128	@ 0x80
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <enable0+0x20>)
 800071a:	f000 fd29 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000724:	4802      	ldr	r0, [pc, #8]	@ (8000730 <enable0+0x20>)
 8000726:	f000 fd23 	bl	8001170 <HAL_GPIO_WritePin>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40010800 	.word	0x40010800

08000734 <enable1>:

void enable1(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2180      	movs	r1, #128	@ 0x80
 800073c:	4805      	ldr	r0, [pc, #20]	@ (8000754 <enable1+0x20>)
 800073e:	f000 fd17 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000748:	4802      	ldr	r0, [pc, #8]	@ (8000754 <enable1+0x20>)
 800074a:	f000 fd11 	bl	8001170 <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40010800 	.word	0x40010800

08000758 <enable2>:

void enable2(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <enable2+0x20>)
 8000764:	f000 fd04 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076e:	4802      	ldr	r0, [pc, #8]	@ (8000778 <enable2+0x20>)
 8000770:	f000 fcfe 	bl	8001170 <HAL_GPIO_WritePin>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40010800 	.word	0x40010800

0800077c <enable3>:

void enable3(){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <enable3+0x20>)
 8000788:	f000 fcf2 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000792:	4802      	ldr	r0, [pc, #8]	@ (800079c <enable3+0x20>)
 8000794:	f000 fcec 	bl	8001170 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40010800 	.word	0x40010800

080007a0 <showTimeDelay_First>:

void enable5(){
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, RESET);
}
void showTimeDelay_First(int first, int second){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	first--;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
	second--;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	603b      	str	r3, [r7, #0]
	enable0();
 80007b6:	f7ff ffab 	bl	8000710 <enable0>
	displaySEG7_1(first/10);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a0c      	ldr	r2, [pc, #48]	@ (80007f0 <showTimeDelay_First+0x50>)
 80007be:	fb82 1203 	smull	r1, r2, r2, r3
 80007c2:	1092      	asrs	r2, r2, #2
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff3d 	bl	8000648 <displaySEG7_1>
	enable2();
 80007ce:	f7ff ffc3 	bl	8000758 <enable2>
	displaySEG7_2(second/10);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	4a06      	ldr	r2, [pc, #24]	@ (80007f0 <showTimeDelay_First+0x50>)
 80007d6:	fb82 1203 	smull	r1, r2, r2, r3
 80007da:	1092      	asrs	r2, r2, #2
 80007dc:	17db      	asrs	r3, r3, #31
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff63 	bl	80006ac <displaySEG7_2>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	66666667 	.word	0x66666667

080007f4 <showTimeDelay_Second>:

void showTimeDelay_Second(int first, int second){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	first--;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3b01      	subs	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
	second--;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	3b01      	subs	r3, #1
 8000808:	603b      	str	r3, [r7, #0]
	enable1();
 800080a:	f7ff ff93 	bl	8000734 <enable1>
	displaySEG7_1(first%10);
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <showTimeDelay_Second+0x64>)
 8000812:	fb83 1302 	smull	r1, r3, r3, r2
 8000816:	1099      	asrs	r1, r3, #2
 8000818:	17d3      	asrs	r3, r2, #31
 800081a:	1ac9      	subs	r1, r1, r3
 800081c:	460b      	mov	r3, r1
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	440b      	add	r3, r1
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	1ad1      	subs	r1, r2, r3
 8000826:	4608      	mov	r0, r1
 8000828:	f7ff ff0e 	bl	8000648 <displaySEG7_1>
	enable3();
 800082c:	f7ff ffa6 	bl	800077c <enable3>
	displaySEG7_2(second%10);
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <showTimeDelay_Second+0x64>)
 8000834:	fb83 1302 	smull	r1, r3, r3, r2
 8000838:	1099      	asrs	r1, r3, #2
 800083a:	17d3      	asrs	r3, r2, #31
 800083c:	1ac9      	subs	r1, r1, r3
 800083e:	460b      	mov	r3, r1
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	440b      	add	r3, r1
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	1ad1      	subs	r1, r2, r3
 8000848:	4608      	mov	r0, r1
 800084a:	f7ff ff2f 	bl	80006ac <displaySEG7_2>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	66666667 	.word	0x66666667

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000860:	f000 f9c4 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f812 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f000 f898 	bl	800099c <MX_GPIO_Init>
  MX_TIM2_Init();
 800086c:	f000 f84a 	bl	8000904 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <main+0x2c>)
 8000872:	f001 f8c3 	bl	80019fc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setValues();
 8000876:	f7ff fdd7 	bl	8000428 <setValues>
     displayFirstLedCouple(LED_INIT);
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fe2c 	bl	80004d8 <displayFirstLedCouple>
  while (1)
  {
	  auto_run();
 8000880:	f7ff fc7e 	bl	8000180 <auto_run>
 8000884:	e7fc      	b.n	8000880 <main+0x24>
 8000886:	bf00      	nop
 8000888:	20000058 	.word	0x20000058

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b090      	sub	sp, #64	@ 0x40
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0318 	add.w	r3, r7, #24
 8000896:	2228      	movs	r2, #40	@ 0x28
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fb14 	bl	8001ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b2:	2301      	movs	r3, #1
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b6:	2310      	movs	r3, #16
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fc6c 	bl	80011a0 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008ce:	f000 f8c9 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 feda 	bl	80016a4 <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f8b5 	bl	8000a64 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3740      	adds	r7, #64	@ 0x40
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000922:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_TIM2_Init+0x94>)
 800092a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800092e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000938:	2209      	movs	r2, #9
 800093a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_TIM2_Init+0x94>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000948:	4813      	ldr	r0, [pc, #76]	@ (8000998 <MX_TIM2_Init+0x94>)
 800094a:	f001 f807 	bl	800195c <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000954:	f000 f886 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000966:	f001 f895 	bl	8001a94 <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000970:	f000 f878 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000982:	f001 fa49 	bl	8001e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 f86a 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000058 	.word	0x20000058

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b29      	ldr	r3, [pc, #164]	@ (8000a58 <MX_GPIO_Init+0xbc>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a28      	ldr	r2, [pc, #160]	@ (8000a58 <MX_GPIO_Init+0xbc>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <MX_GPIO_Init+0xbc>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <MX_GPIO_Init+0xbc>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a22      	ldr	r2, [pc, #136]	@ (8000a58 <MX_GPIO_Init+0xbc>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_GPIO_Init+0xbc>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80009e0:	2200      	movs	r2, #0
 80009e2:	f641 71fe 	movw	r1, #8190	@ 0x1ffe
 80009e6:	481d      	ldr	r0, [pc, #116]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009e8:	f000 fbc2 	bl	8001170 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|D2_Pin
 80009ec:	2200      	movs	r2, #0
 80009ee:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 80009f2:	481b      	ldr	r0, [pc, #108]	@ (8000a60 <MX_GPIO_Init+0xc4>)
 80009f4:	f000 fbbc 	bl	8001170 <HAL_GPIO_WritePin>
                          |B2_Pin|C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin EN5_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80009f8:	f641 73fe 	movw	r3, #8190	@ 0x1ffe
 80009fc:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2302      	movs	r3, #2
 8000a08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4812      	ldr	r0, [pc, #72]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 8000a12:	f000 fa31 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin D2_Pin
                           E2_Pin F2_Pin G2_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin A2_Pin
                           B2_Pin C2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D2_Pin
 8000a16:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000a1a:	60bb      	str	r3, [r7, #8]
                          |E2_Pin|F2_Pin|G2_Pin|D1_Pin
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2302      	movs	r3, #2
 8000a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <MX_GPIO_Init+0xc4>)
 8000a30:	f000 fa22 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000a34:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	4619      	mov	r1, r3
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 8000a4a:	f000 fa15 	bl	8000e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <Error_Handler+0x8>

08000a70 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int timer_ID, int duration){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	timer_counter[timer_ID] = duration;
 8000a7a:	4907      	ldr	r1, [pc, #28]	@ (8000a98 <setTimer+0x28>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer_ID] = 0;
 8000a84:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <setTimer+0x2c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	200000a0 	.word	0x200000a0
 8000a9c:	200000c8 	.word	0x200000c8

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_MspInit+0x5c>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <HAL_MspInit+0x5c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_MspInit+0x5c>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x5c>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <HAL_MspInit+0x5c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x5c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_MspInit+0x60>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <HAL_MspInit+0x60>)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010000 	.word	0x40010000

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b14:	d10b      	bne.n	8000b2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_TIM_Base_MspInit+0x34>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_TIM_Base_MspInit+0x34>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_TIM_Base_MspInit+0x34>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	40021000 	.word	0x40021000

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <NMI_Handler+0x4>

08000b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <MemManage_Handler+0x4>

08000b54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f874 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff fff8 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480b      	ldr	r0, [pc, #44]	@ (8000bd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ba6:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a09      	ldr	r2, [pc, #36]	@ (8000be0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bbc:	4c09      	ldr	r4, [pc, #36]	@ (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f001 f985 	bl	8001ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bce:	f7ff fe45 	bl	800085c <main>
  bx lr
 8000bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000bdc:	08001f70 	.word	0x08001f70
  ldr r2, =_sbss
 8000be0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000be4:	200000f4 	.word	0x200000f4

08000be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_2_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <HAL_Init+0x28>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <HAL_Init+0x28>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f907 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 f808 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff ff4a 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <HAL_InitTick+0x54>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_InitTick+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f911 	bl	8000e5e <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00e      	b.n	8000c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d80a      	bhi.n	8000c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 f8e7 	bl	8000e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4a06      	ldr	r2, [pc, #24]	@ (8000c74 <HAL_InitTick+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000000c 	.word	0x2000000c
 8000c70:	20000014 	.word	0x20000014
 8000c74:	20000010 	.word	0x20000010

08000c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a03      	ldr	r2, [pc, #12]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	20000014 	.word	0x20000014
 8000c98:	200000f0 	.word	0x200000f0

08000c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	@ (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	200000f0 	.word	0x200000f0

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	@ (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	@ (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	@ 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f7ff ff90 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff49 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff5e 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ff90 	bl	8000d68 <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5f 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffb0 	bl	8000dcc <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b08b      	sub	sp, #44	@ 0x2c
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	e161      	b.n	8001150 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 8150 	bne.w	800114a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	4a97      	ldr	r2, [pc, #604]	@ (800110c <HAL_GPIO_Init+0x294>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d05e      	beq.n	8000f72 <HAL_GPIO_Init+0xfa>
 8000eb4:	4a95      	ldr	r2, [pc, #596]	@ (800110c <HAL_GPIO_Init+0x294>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d875      	bhi.n	8000fa6 <HAL_GPIO_Init+0x12e>
 8000eba:	4a95      	ldr	r2, [pc, #596]	@ (8001110 <HAL_GPIO_Init+0x298>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d058      	beq.n	8000f72 <HAL_GPIO_Init+0xfa>
 8000ec0:	4a93      	ldr	r2, [pc, #588]	@ (8001110 <HAL_GPIO_Init+0x298>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d86f      	bhi.n	8000fa6 <HAL_GPIO_Init+0x12e>
 8000ec6:	4a93      	ldr	r2, [pc, #588]	@ (8001114 <HAL_GPIO_Init+0x29c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d052      	beq.n	8000f72 <HAL_GPIO_Init+0xfa>
 8000ecc:	4a91      	ldr	r2, [pc, #580]	@ (8001114 <HAL_GPIO_Init+0x29c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d869      	bhi.n	8000fa6 <HAL_GPIO_Init+0x12e>
 8000ed2:	4a91      	ldr	r2, [pc, #580]	@ (8001118 <HAL_GPIO_Init+0x2a0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d04c      	beq.n	8000f72 <HAL_GPIO_Init+0xfa>
 8000ed8:	4a8f      	ldr	r2, [pc, #572]	@ (8001118 <HAL_GPIO_Init+0x2a0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d863      	bhi.n	8000fa6 <HAL_GPIO_Init+0x12e>
 8000ede:	4a8f      	ldr	r2, [pc, #572]	@ (800111c <HAL_GPIO_Init+0x2a4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d046      	beq.n	8000f72 <HAL_GPIO_Init+0xfa>
 8000ee4:	4a8d      	ldr	r2, [pc, #564]	@ (800111c <HAL_GPIO_Init+0x2a4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d85d      	bhi.n	8000fa6 <HAL_GPIO_Init+0x12e>
 8000eea:	2b12      	cmp	r3, #18
 8000eec:	d82a      	bhi.n	8000f44 <HAL_GPIO_Init+0xcc>
 8000eee:	2b12      	cmp	r3, #18
 8000ef0:	d859      	bhi.n	8000fa6 <HAL_GPIO_Init+0x12e>
 8000ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef8 <HAL_GPIO_Init+0x80>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f73 	.word	0x08000f73
 8000efc:	08000f4d 	.word	0x08000f4d
 8000f00:	08000f5f 	.word	0x08000f5f
 8000f04:	08000fa1 	.word	0x08000fa1
 8000f08:	08000fa7 	.word	0x08000fa7
 8000f0c:	08000fa7 	.word	0x08000fa7
 8000f10:	08000fa7 	.word	0x08000fa7
 8000f14:	08000fa7 	.word	0x08000fa7
 8000f18:	08000fa7 	.word	0x08000fa7
 8000f1c:	08000fa7 	.word	0x08000fa7
 8000f20:	08000fa7 	.word	0x08000fa7
 8000f24:	08000fa7 	.word	0x08000fa7
 8000f28:	08000fa7 	.word	0x08000fa7
 8000f2c:	08000fa7 	.word	0x08000fa7
 8000f30:	08000fa7 	.word	0x08000fa7
 8000f34:	08000fa7 	.word	0x08000fa7
 8000f38:	08000fa7 	.word	0x08000fa7
 8000f3c:	08000f55 	.word	0x08000f55
 8000f40:	08000f69 	.word	0x08000f69
 8000f44:	4a76      	ldr	r2, [pc, #472]	@ (8001120 <HAL_GPIO_Init+0x2a8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f4a:	e02c      	b.n	8000fa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	623b      	str	r3, [r7, #32]
          break;
 8000f52:	e029      	b.n	8000fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	623b      	str	r3, [r7, #32]
          break;
 8000f5c:	e024      	b.n	8000fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	3308      	adds	r3, #8
 8000f64:	623b      	str	r3, [r7, #32]
          break;
 8000f66:	e01f      	b.n	8000fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	330c      	adds	r3, #12
 8000f6e:	623b      	str	r3, [r7, #32]
          break;
 8000f70:	e01a      	b.n	8000fa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e013      	b.n	8000fa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d105      	bne.n	8000f94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f88:	2308      	movs	r3, #8
 8000f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	611a      	str	r2, [r3, #16]
          break;
 8000f92:	e009      	b.n	8000fa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f94:	2308      	movs	r3, #8
 8000f96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	615a      	str	r2, [r3, #20]
          break;
 8000f9e:	e003      	b.n	8000fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
          break;
 8000fa4:	e000      	b.n	8000fa8 <HAL_GPIO_Init+0x130>
          break;
 8000fa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	2bff      	cmp	r3, #255	@ 0xff
 8000fac:	d801      	bhi.n	8000fb2 <HAL_GPIO_Init+0x13a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	e001      	b.n	8000fb6 <HAL_GPIO_Init+0x13e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2bff      	cmp	r3, #255	@ 0xff
 8000fbc:	d802      	bhi.n	8000fc4 <HAL_GPIO_Init+0x14c>
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	e002      	b.n	8000fca <HAL_GPIO_Init+0x152>
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	3b08      	subs	r3, #8
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	210f      	movs	r1, #15
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	401a      	ands	r2, r3
 8000fdc:	6a39      	ldr	r1, [r7, #32]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 80a9 	beq.w	800114a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8001124 <HAL_GPIO_Init+0x2ac>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a49      	ldr	r2, [pc, #292]	@ (8001124 <HAL_GPIO_Init+0x2ac>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <HAL_GPIO_Init+0x2ac>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001010:	4a45      	ldr	r2, [pc, #276]	@ (8001128 <HAL_GPIO_Init+0x2b0>)
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a3d      	ldr	r2, [pc, #244]	@ (800112c <HAL_GPIO_Init+0x2b4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d00d      	beq.n	8001058 <HAL_GPIO_Init+0x1e0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a3c      	ldr	r2, [pc, #240]	@ (8001130 <HAL_GPIO_Init+0x2b8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x1dc>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a3b      	ldr	r2, [pc, #236]	@ (8001134 <HAL_GPIO_Init+0x2bc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d101      	bne.n	8001050 <HAL_GPIO_Init+0x1d8>
 800104c:	2302      	movs	r3, #2
 800104e:	e004      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 8001050:	2303      	movs	r3, #3
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 8001058:	2300      	movs	r3, #0
 800105a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800106a:	492f      	ldr	r1, [pc, #188]	@ (8001128 <HAL_GPIO_Init+0x2b0>)
 800106c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001084:	4b2c      	ldr	r3, [pc, #176]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	492b      	ldr	r1, [pc, #172]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	608b      	str	r3, [r1, #8]
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001092:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	43db      	mvns	r3, r3
 800109a:	4927      	ldr	r1, [pc, #156]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 800109c:	4013      	ands	r3, r2
 800109e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010ac:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	4921      	ldr	r1, [pc, #132]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60cb      	str	r3, [r1, #12]
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	491d      	ldr	r1, [pc, #116]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4917      	ldr	r1, [pc, #92]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	4913      	ldr	r1, [pc, #76]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01f      	beq.n	800113c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	490d      	ldr	r1, [pc, #52]	@ (8001138 <HAL_GPIO_Init+0x2c0>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
 8001108:	e01f      	b.n	800114a <HAL_GPIO_Init+0x2d2>
 800110a:	bf00      	nop
 800110c:	10320000 	.word	0x10320000
 8001110:	10310000 	.word	0x10310000
 8001114:	10220000 	.word	0x10220000
 8001118:	10210000 	.word	0x10210000
 800111c:	10120000 	.word	0x10120000
 8001120:	10110000 	.word	0x10110000
 8001124:	40021000 	.word	0x40021000
 8001128:	40010000 	.word	0x40010000
 800112c:	40010800 	.word	0x40010800
 8001130:	40010c00 	.word	0x40010c00
 8001134:	40011000 	.word	0x40011000
 8001138:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_GPIO_Init+0x2f4>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	43db      	mvns	r3, r3
 8001144:	4909      	ldr	r1, [pc, #36]	@ (800116c <HAL_GPIO_Init+0x2f4>)
 8001146:	4013      	ands	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	3301      	adds	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	fa22 f303 	lsr.w	r3, r2, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	f47f ae96 	bne.w	8000e8c <HAL_GPIO_Init+0x14>
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	372c      	adds	r7, #44	@ 0x2c
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	041a      	lsls	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	611a      	str	r2, [r3, #16]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e272      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8087 	beq.w	80012ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c0:	4b92      	ldr	r3, [pc, #584]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d00c      	beq.n	80011e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011cc:	4b8f      	ldr	r3, [pc, #572]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d112      	bne.n	80011fe <HAL_RCC_OscConfig+0x5e>
 80011d8:	4b8c      	ldr	r3, [pc, #560]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e4:	d10b      	bne.n	80011fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e6:	4b89      	ldr	r3, [pc, #548]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d06c      	beq.n	80012cc <HAL_RCC_OscConfig+0x12c>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d168      	bne.n	80012cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e24c      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001206:	d106      	bne.n	8001216 <HAL_RCC_OscConfig+0x76>
 8001208:	4b80      	ldr	r3, [pc, #512]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a7f      	ldr	r2, [pc, #508]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 800120e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	e02e      	b.n	8001274 <HAL_RCC_OscConfig+0xd4>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x98>
 800121e:	4b7b      	ldr	r3, [pc, #492]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a7a      	ldr	r2, [pc, #488]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b78      	ldr	r3, [pc, #480]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a77      	ldr	r2, [pc, #476]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001230:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e01d      	b.n	8001274 <HAL_RCC_OscConfig+0xd4>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0xbc>
 8001242:	4b72      	ldr	r3, [pc, #456]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a71      	ldr	r2, [pc, #452]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b6f      	ldr	r3, [pc, #444]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6e      	ldr	r2, [pc, #440]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e00b      	b.n	8001274 <HAL_RCC_OscConfig+0xd4>
 800125c:	4b6b      	ldr	r3, [pc, #428]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a6a      	ldr	r2, [pc, #424]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b68      	ldr	r3, [pc, #416]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a67      	ldr	r2, [pc, #412]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 800126e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001272:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fd0e 	bl	8000c9c <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fd0a 	bl	8000c9c <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	@ 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e200      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	4b5d      	ldr	r3, [pc, #372]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0xe4>
 80012a2:	e014      	b.n	80012ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fcfa 	bl	8000c9c <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fcf6 	bl	8000c9c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	@ 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e1ec      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	4b53      	ldr	r3, [pc, #332]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x10c>
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d063      	beq.n	80013a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012da:	4b4c      	ldr	r3, [pc, #304]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012e6:	4b49      	ldr	r3, [pc, #292]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d11c      	bne.n	800132c <HAL_RCC_OscConfig+0x18c>
 80012f2:	4b46      	ldr	r3, [pc, #280]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d116      	bne.n	800132c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	4b43      	ldr	r3, [pc, #268]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_RCC_OscConfig+0x176>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d001      	beq.n	8001316 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e1c0      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001316:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4939      	ldr	r1, [pc, #228]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	e03a      	b.n	80013a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d020      	beq.n	8001376 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001334:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fcaf 	bl	8000c9c <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff fcab 	bl	8000c9c <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e1a1      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4927      	ldr	r1, [pc, #156]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
 8001374:	e015      	b.n	80013a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001376:	4b26      	ldr	r3, [pc, #152]	@ (8001410 <HAL_RCC_OscConfig+0x270>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fc8e 	bl	8000c9c <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001384:	f7ff fc8a 	bl	8000c9c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e180      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d03a      	beq.n	8001424 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d019      	beq.n	80013ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_RCC_OscConfig+0x274>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013bc:	f7ff fc6e 	bl	8000c9c <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc6a 	bl	8000c9c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e160      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <HAL_RCC_OscConfig+0x26c>)
 80013d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 fa9c 	bl	8001920 <RCC_Delay>
 80013e8:	e01c      	b.n	8001424 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_RCC_OscConfig+0x274>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f0:	f7ff fc54 	bl	8000c9c <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f6:	e00f      	b.n	8001418 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc50 	bl	8000c9c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d908      	bls.n	8001418 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e146      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	42420000 	.word	0x42420000
 8001414:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001418:	4b92      	ldr	r3, [pc, #584]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1e9      	bne.n	80013f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a6 	beq.w	800157e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001436:	4b8b      	ldr	r3, [pc, #556]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10d      	bne.n	800145e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b88      	ldr	r3, [pc, #544]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a87      	ldr	r2, [pc, #540]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b85      	ldr	r3, [pc, #532]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145a:	2301      	movs	r3, #1
 800145c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145e:	4b82      	ldr	r3, [pc, #520]	@ (8001668 <HAL_RCC_OscConfig+0x4c8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d118      	bne.n	800149c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146a:	4b7f      	ldr	r3, [pc, #508]	@ (8001668 <HAL_RCC_OscConfig+0x4c8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a7e      	ldr	r2, [pc, #504]	@ (8001668 <HAL_RCC_OscConfig+0x4c8>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001476:	f7ff fc11 	bl	8000c9c <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147e:	f7ff fc0d 	bl	8000c9c <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b64      	cmp	r3, #100	@ 0x64
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e103      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	4b75      	ldr	r3, [pc, #468]	@ (8001668 <HAL_RCC_OscConfig+0x4c8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x312>
 80014a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6213      	str	r3, [r2, #32]
 80014b0:	e02d      	b.n	800150e <HAL_RCC_OscConfig+0x36e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x334>
 80014ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a69      	ldr	r2, [pc, #420]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6213      	str	r3, [r2, #32]
 80014c6:	4b67      	ldr	r3, [pc, #412]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a66      	ldr	r2, [pc, #408]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	f023 0304 	bic.w	r3, r3, #4
 80014d0:	6213      	str	r3, [r2, #32]
 80014d2:	e01c      	b.n	800150e <HAL_RCC_OscConfig+0x36e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d10c      	bne.n	80014f6 <HAL_RCC_OscConfig+0x356>
 80014dc:	4b61      	ldr	r3, [pc, #388]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a60      	ldr	r2, [pc, #384]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6213      	str	r3, [r2, #32]
 80014e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6213      	str	r3, [r2, #32]
 80014f4:	e00b      	b.n	800150e <HAL_RCC_OscConfig+0x36e>
 80014f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6213      	str	r3, [r2, #32]
 8001502:	4b58      	ldr	r3, [pc, #352]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4a57      	ldr	r2, [pc, #348]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	f023 0304 	bic.w	r3, r3, #4
 800150c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d015      	beq.n	8001542 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fbc1 	bl	8000c9c <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff fbbd 	bl	8000c9c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e0b1      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001534:	4b4b      	ldr	r3, [pc, #300]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ee      	beq.n	800151e <HAL_RCC_OscConfig+0x37e>
 8001540:	e014      	b.n	800156c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fbab 	bl	8000c9c <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fba7 	bl	8000c9c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e09b      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001560:	4b40      	ldr	r3, [pc, #256]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ee      	bne.n	800154a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d105      	bne.n	800157e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001572:	4b3c      	ldr	r3, [pc, #240]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a3b      	ldr	r2, [pc, #236]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8087 	beq.w	8001696 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001588:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b08      	cmp	r3, #8
 8001592:	d061      	beq.n	8001658 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d146      	bne.n	800162a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	4b33      	ldr	r3, [pc, #204]	@ (800166c <HAL_RCC_OscConfig+0x4cc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb7b 	bl	8000c9c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fb77 	bl	8000c9c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e06d      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015bc:	4b29      	ldr	r3, [pc, #164]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d0:	d108      	bne.n	80015e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015d2:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	4921      	ldr	r1, [pc, #132]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a19      	ldr	r1, [r3, #32]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	430b      	orrs	r3, r1
 80015f6:	491b      	ldr	r1, [pc, #108]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_RCC_OscConfig+0x4cc>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fb4b 	bl	8000c9c <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fb47 	bl	8000c9c <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e03d      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x46a>
 8001628:	e035      	b.n	8001696 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <HAL_RCC_OscConfig+0x4cc>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fb34 	bl	8000c9c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff fb30 	bl	8000c9c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e026      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x498>
 8001656:	e01e      	b.n	8001696 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e019      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
 8001664:	40021000 	.word	0x40021000
 8001668:	40007000 	.word	0x40007000
 800166c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <HAL_RCC_OscConfig+0x500>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	429a      	cmp	r2, r3
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168e:	429a      	cmp	r2, r3
 8001690:	d001      	beq.n	8001696 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0d0      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d910      	bls.n	80016e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b67      	ldr	r3, [pc, #412]	@ (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 0207 	bic.w	r2, r3, #7
 80016ce:	4965      	ldr	r1, [pc, #404]	@ (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b63      	ldr	r3, [pc, #396]	@ (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0b8      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001700:	4b59      	ldr	r3, [pc, #356]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a58      	ldr	r2, [pc, #352]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800170a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001718:	4b53      	ldr	r3, [pc, #332]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a52      	ldr	r2, [pc, #328]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b50      	ldr	r3, [pc, #320]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	494d      	ldr	r1, [pc, #308]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d040      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b47      	ldr	r3, [pc, #284]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d115      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e07f      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e073      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e06b      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001782:	4b39      	ldr	r3, [pc, #228]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4936      	ldr	r1, [pc, #216]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001794:	f7ff fa82 	bl	8000c9c <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff fa7e 	bl	8000c9c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e053      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1eb      	bne.n	800179c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c4:	4b27      	ldr	r3, [pc, #156]	@ (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d210      	bcs.n	80017f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 0207 	bic.w	r2, r3, #7
 80017da:	4922      	ldr	r1, [pc, #136]	@ (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e032      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001800:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4916      	ldr	r1, [pc, #88]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	490e      	ldr	r1, [pc, #56]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001832:	f000 f821 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8001836:	4602      	mov	r2, r0
 8001838:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	490a      	ldr	r1, [pc, #40]	@ (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001844:	5ccb      	ldrb	r3, [r1, r3]
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	4a09      	ldr	r2, [pc, #36]	@ (8001870 <HAL_RCC_ClockConfig+0x1cc>)
 800184c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <HAL_RCC_ClockConfig+0x1d0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff f9e0 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40022000 	.word	0x40022000
 8001868:	40021000 	.word	0x40021000
 800186c:	08001f44 	.word	0x08001f44
 8001870:	2000000c 	.word	0x2000000c
 8001874:	20000010 	.word	0x20000010

08001878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <HAL_RCC_GetSysClockFreq+0x94>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d002      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x30>
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d003      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x36>
 80018a6:	e027      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018a8:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x98>)
 80018aa:	613b      	str	r3, [r7, #16]
      break;
 80018ac:	e027      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	0c9b      	lsrs	r3, r3, #18
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018b8:	5cd3      	ldrb	r3, [r2, r3]
 80018ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d010      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_RCC_GetSysClockFreq+0x94>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	0c5b      	lsrs	r3, r3, #17
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	4a11      	ldr	r2, [pc, #68]	@ (8001918 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018d2:	5cd3      	ldrb	r3, [r2, r3]
 80018d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x98>)
 80018da:	fb03 f202 	mul.w	r2, r3, r2
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e004      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a0c      	ldr	r2, [pc, #48]	@ (800191c <HAL_RCC_GetSysClockFreq+0xa4>)
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	613b      	str	r3, [r7, #16]
      break;
 80018f6:	e002      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x98>)
 80018fa:	613b      	str	r3, [r7, #16]
      break;
 80018fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018fe:	693b      	ldr	r3, [r7, #16]
}
 8001900:	4618      	mov	r0, r3
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	007a1200 	.word	0x007a1200
 8001914:	08001f54 	.word	0x08001f54
 8001918:	08001f64 	.word	0x08001f64
 800191c:	003d0900 	.word	0x003d0900

08001920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <RCC_Delay+0x34>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <RCC_Delay+0x38>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0a5b      	lsrs	r3, r3, #9
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800193c:	bf00      	nop
  }
  while (Delay --);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	60fa      	str	r2, [r7, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f9      	bne.n	800193c <RCC_Delay+0x1c>
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	2000000c 	.word	0x2000000c
 8001958:	10624dd3 	.word	0x10624dd3

0800195c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e041      	b.n	80019f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff f8be 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3304      	adds	r3, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 f942 	bl	8001c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d001      	beq.n	8001a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e035      	b.n	8001a80 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a16      	ldr	r2, [pc, #88]	@ (8001a8c <HAL_TIM_Base_Start_IT+0x90>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_TIM_Base_Start_IT+0x4e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a3e:	d004      	beq.n	8001a4a <HAL_TIM_Base_Start_IT+0x4e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <HAL_TIM_Base_Start_IT+0x94>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d111      	bne.n	8001a6e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d010      	beq.n	8001a7e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a6c:	e007      	b.n	8001a7e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40012c00 	.word	0x40012c00
 8001a90:	40000400 	.word	0x40000400

08001a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0b4      	b.n	8001c1a <HAL_TIM_ConfigClockSource+0x186>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ae8:	d03e      	beq.n	8001b68 <HAL_TIM_ConfigClockSource+0xd4>
 8001aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aee:	f200 8087 	bhi.w	8001c00 <HAL_TIM_ConfigClockSource+0x16c>
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af6:	f000 8086 	beq.w	8001c06 <HAL_TIM_ConfigClockSource+0x172>
 8001afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001afe:	d87f      	bhi.n	8001c00 <HAL_TIM_ConfigClockSource+0x16c>
 8001b00:	2b70      	cmp	r3, #112	@ 0x70
 8001b02:	d01a      	beq.n	8001b3a <HAL_TIM_ConfigClockSource+0xa6>
 8001b04:	2b70      	cmp	r3, #112	@ 0x70
 8001b06:	d87b      	bhi.n	8001c00 <HAL_TIM_ConfigClockSource+0x16c>
 8001b08:	2b60      	cmp	r3, #96	@ 0x60
 8001b0a:	d050      	beq.n	8001bae <HAL_TIM_ConfigClockSource+0x11a>
 8001b0c:	2b60      	cmp	r3, #96	@ 0x60
 8001b0e:	d877      	bhi.n	8001c00 <HAL_TIM_ConfigClockSource+0x16c>
 8001b10:	2b50      	cmp	r3, #80	@ 0x50
 8001b12:	d03c      	beq.n	8001b8e <HAL_TIM_ConfigClockSource+0xfa>
 8001b14:	2b50      	cmp	r3, #80	@ 0x50
 8001b16:	d873      	bhi.n	8001c00 <HAL_TIM_ConfigClockSource+0x16c>
 8001b18:	2b40      	cmp	r3, #64	@ 0x40
 8001b1a:	d058      	beq.n	8001bce <HAL_TIM_ConfigClockSource+0x13a>
 8001b1c:	2b40      	cmp	r3, #64	@ 0x40
 8001b1e:	d86f      	bhi.n	8001c00 <HAL_TIM_ConfigClockSource+0x16c>
 8001b20:	2b30      	cmp	r3, #48	@ 0x30
 8001b22:	d064      	beq.n	8001bee <HAL_TIM_ConfigClockSource+0x15a>
 8001b24:	2b30      	cmp	r3, #48	@ 0x30
 8001b26:	d86b      	bhi.n	8001c00 <HAL_TIM_ConfigClockSource+0x16c>
 8001b28:	2b20      	cmp	r3, #32
 8001b2a:	d060      	beq.n	8001bee <HAL_TIM_ConfigClockSource+0x15a>
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d867      	bhi.n	8001c00 <HAL_TIM_ConfigClockSource+0x16c>
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d05c      	beq.n	8001bee <HAL_TIM_ConfigClockSource+0x15a>
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d05a      	beq.n	8001bee <HAL_TIM_ConfigClockSource+0x15a>
 8001b38:	e062      	b.n	8001c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b4a:	f000 f946 	bl	8001dda <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	609a      	str	r2, [r3, #8]
      break;
 8001b66:	e04f      	b.n	8001c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b78:	f000 f92f 	bl	8001dda <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b8a:	609a      	str	r2, [r3, #8]
      break;
 8001b8c:	e03c      	b.n	8001c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f000 f8a6 	bl	8001cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2150      	movs	r1, #80	@ 0x50
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f8fd 	bl	8001da6 <TIM_ITRx_SetConfig>
      break;
 8001bac:	e02c      	b.n	8001c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f000 f8c4 	bl	8001d48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2160      	movs	r1, #96	@ 0x60
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f8ed 	bl	8001da6 <TIM_ITRx_SetConfig>
      break;
 8001bcc:	e01c      	b.n	8001c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f000 f886 	bl	8001cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2140      	movs	r1, #64	@ 0x40
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f8dd 	bl	8001da6 <TIM_ITRx_SetConfig>
      break;
 8001bec:	e00c      	b.n	8001c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	f000 f8d4 	bl	8001da6 <TIM_ITRx_SetConfig>
      break;
 8001bfe:	e003      	b.n	8001c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
      break;
 8001c04:	e000      	b.n	8001c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a2b      	ldr	r2, [pc, #172]	@ (8001ce4 <TIM_Base_SetConfig+0xc0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d007      	beq.n	8001c4c <TIM_Base_SetConfig+0x28>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c42:	d003      	beq.n	8001c4c <TIM_Base_SetConfig+0x28>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a28      	ldr	r2, [pc, #160]	@ (8001ce8 <TIM_Base_SetConfig+0xc4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d108      	bne.n	8001c5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a20      	ldr	r2, [pc, #128]	@ (8001ce4 <TIM_Base_SetConfig+0xc0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <TIM_Base_SetConfig+0x52>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c6c:	d003      	beq.n	8001c76 <TIM_Base_SetConfig+0x52>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce8 <TIM_Base_SetConfig+0xc4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d108      	bne.n	8001c88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <TIM_Base_SetConfig+0xc0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d103      	bne.n	8001cbc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f023 0201 	bic.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	40000400 	.word	0x40000400

08001cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	f023 0201 	bic.w	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f023 030a 	bic.w	r3, r3, #10
 8001d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	621a      	str	r2, [r3, #32]
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	f023 0210 	bic.w	r2, r3, #16
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	031b      	lsls	r3, r3, #12
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001d84:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	621a      	str	r2, [r3, #32]
}
 8001d9c:	bf00      	nop
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f043 0307 	orr.w	r3, r3, #7
 8001dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	609a      	str	r2, [r3, #8]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b087      	sub	sp, #28
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001df4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	021a      	lsls	r2, r3, #8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	609a      	str	r2, [r3, #8]
}
 8001e0e:	bf00      	nop
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e041      	b.n	8001eb4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ec0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7c:	d004      	beq.n	8001e88 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a10      	ldr	r2, [pc, #64]	@ (8001ec4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d10c      	bne.n	8001ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40012c00 	.word	0x40012c00
 8001ec4:	40000400 	.word	0x40000400

08001ec8 <memset>:
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4402      	add	r2, r0
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <memset+0xa>
 8001ed0:	4770      	bx	lr
 8001ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ed6:	e7f9      	b.n	8001ecc <memset+0x4>

08001ed8 <__libc_init_array>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	2600      	movs	r6, #0
 8001edc:	4d0c      	ldr	r5, [pc, #48]	@ (8001f10 <__libc_init_array+0x38>)
 8001ede:	4c0d      	ldr	r4, [pc, #52]	@ (8001f14 <__libc_init_array+0x3c>)
 8001ee0:	1b64      	subs	r4, r4, r5
 8001ee2:	10a4      	asrs	r4, r4, #2
 8001ee4:	42a6      	cmp	r6, r4
 8001ee6:	d109      	bne.n	8001efc <__libc_init_array+0x24>
 8001ee8:	f000 f81a 	bl	8001f20 <_init>
 8001eec:	2600      	movs	r6, #0
 8001eee:	4d0a      	ldr	r5, [pc, #40]	@ (8001f18 <__libc_init_array+0x40>)
 8001ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8001f1c <__libc_init_array+0x44>)
 8001ef2:	1b64      	subs	r4, r4, r5
 8001ef4:	10a4      	asrs	r4, r4, #2
 8001ef6:	42a6      	cmp	r6, r4
 8001ef8:	d105      	bne.n	8001f06 <__libc_init_array+0x2e>
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f00:	4798      	blx	r3
 8001f02:	3601      	adds	r6, #1
 8001f04:	e7ee      	b.n	8001ee4 <__libc_init_array+0xc>
 8001f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f0a:	4798      	blx	r3
 8001f0c:	3601      	adds	r6, #1
 8001f0e:	e7f2      	b.n	8001ef6 <__libc_init_array+0x1e>
 8001f10:	08001f68 	.word	0x08001f68
 8001f14:	08001f68 	.word	0x08001f68
 8001f18:	08001f68 	.word	0x08001f68
 8001f1c:	08001f6c 	.word	0x08001f6c

08001f20 <_init>:
 8001f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f22:	bf00      	nop
 8001f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f26:	bc08      	pop	{r3}
 8001f28:	469e      	mov	lr, r3
 8001f2a:	4770      	bx	lr

08001f2c <_fini>:
 8001f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2e:	bf00      	nop
 8001f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f32:	bc08      	pop	{r3}
 8001f34:	469e      	mov	lr, r3
 8001f36:	4770      	bx	lr
